@model Sistema.Models.VMProjeto

@{
    Layout = "~/Views/Shared/_LayoutProjeto.cshtml";
}

<div class="form-horizontal espaco">
    <div class="retangulo">
        <div class="infos">
            <div class="imagem">
                @if (Model.Logo == "projeto.svg")
                {
                    <div class="img-projeto" data-open-modal="modalPic"> <img src="~/Content/img/add-logo.svg" /> </div>
                }
                else
                {

                    <div class="img-projeto" style="" data-open-modal="modalPic">
                        <img class="logo-overlay" src="~/Content/img/add-logo-transp.svg" />
                        <img class="blurred" src="~/Uploads/@Model.Logo" />
                    </div>
                }
            </div>
            <div class="descricao">
                @using (Html.BeginForm("EditarProjeto", "Home", FormMethod.Post))
                {
                    <div class="input-infos">
                        @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                    </div>
                    <div class="infos-txt">
                        @Html.TextAreaFor(model => model.Descricao, new { @class = "bio-text" })
                        @Html.HiddenFor(k => k.Id)
                    </div>
                }
                <div>
                    <ul class="tag-group interests">

                        @{
                            int x = 0;
                            foreach (var item in Model.ProjetoTags)
                            {
                                if (x < 3)
                                {
                                    <li class="tag-container">
                                        <div class="tag"><span class="tag-text">@item.Tag.Nome</span></div>
                                    </li>
                                    x++;
                                }
                            }
                            if (Model.ProjetoTags.Count > 3)
                            {
                                <li class="tag-container">
                                    <div class="tag"><span class="tag-text">...</span></div>
                                </li>
                            }
                            if (x == 0)
                            {
                                <li class="tag-container tag-placeholder">
                                    <div class="tag"><span class="tag-text">As tags aparecerão aqui!</span></div>
                                </li>
                            }
                        }

                        <li>
                            <button class="add-tag" data-open-modal="modalTag"><span class="iconify" data-icon="tabler:plus" data-inline="false"></span></button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="upload">
            <p class="upload-dica">
                Recomendamos que você insira algumas informações especificas sobre o seu projeto, o que ajudará possiveis investidores a compreender melhor os objetivos financeiros como projeções financeiras, pesquisa de mercado, valor de investimento, retorno financeiro...
            </p>
            <button class="upload-input" data-open-modal="modalUploads">
                <span class="iconify" data-icon="tabler:cloud-upload" data-inline="false"></span>
            </button>
            <div class="upload-arq">
                @{
                    int quant = 0;
                    foreach (var item in Model.ArquivosProjetos)
                    {

                        <a onclick="window.open('@Url.Action("VisualizarPdf", "Home", new { id = item.Id })', '_blank');">
                            <div class="uploads-icon">
                                <span class="iconify" data-icon="tabler:file-text" data-inline="false"></span>
                            </div>
                            <h2>@item.Nome</h2>
                        </a>
                        <button class="btn delete-acc" onclick="window.location.href='@Url.Action("RemoverUpload", "Home", new { idProjeto = Model.Id, idArquivo = item.Id })'">x</button>
                        quant++;
                    }
                    if (quant == 0)
                    {
                        <p>Seus uploads de documentos aparecerão aqui ;)</p>
                    }
                }

            </div>
        </div>
    </div>

    <div class="projeto-equipe">
        <a class="title-equipe" data-open-modal="modalEquipe"> Equipe <span class="iconify" data-icon="tabler:user-plus" data-inline="false"></span></a>
        <div class="equipe-container">
            @foreach (var item in Model.IntegrantesProjetos)
            {
                <div class="profile-pic profile-pic-mini">
                    <a href="@Url.Action("VisitarPerfil", new { id = item.UsuarioID })">

                        <img class="circle-pic" src="~/Uploads/@item.Usuario.Foto" />


                    </a>
                </div>
            }
        </div>
    </div>
    <section class="content-container section-separator">
        @if (Model.Adm == true)
        {
            <div class="form-btns">
                @if (Model.Ativo)
                {
                    <input data-open-modal="modalDesativar" value="Desativar" class="btn btn-primary" />
                }
                <input data-open-modal="modalPenalizar" value="Penalizar" class="btn btn-primary" />
            </div>
        }
    </section>
</div>

<div class="modal-bg hidden" id="modalPic">
    <div class="modal">
        <div class="modal-header">
            <h3 class="modal-title">Editar Foto</h3>
            <div class="close-modal" data-close-modal="modalPic">
                <span class="iconify" data-icon="tabler:x" data-inline="true"></span>
            </div>
        </div>
        @using (Html.BeginForm("EditarLogo", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(model => model.Id)
            <div class="modal-body">
                <div class="preview-container">
                    <div id="upload-demo">

                    </div>
                </div>

                <span class="file-name" id="preview-file-name"></span>
            </div>
            <p class="text-danger">Extensões Permitidas: .png .jpeg .jpg - máx. 2Mb</p>
            <div class="modal-footer">
                <div class="form-btns">
                    <label for="upload" class="btn btn-secondary">Selecione um arquivo</label>
                    <input name="arq" class="btn btn-secondary" type="file" id="upload" />
                    <button class="btn btn-primary upload-result">Confirmar</button>
                </div>
            </div>
        }
    </div>
</div>

<div class="modal-bg hidden" id="modalTag">
    <div class="modal">
        <div class="modal-header">
            <h3 class="modal-title">Editar Tags</h3>
            <div class="close-modal" data-close-modal="modalTag">
                <span class="iconify" data-icon="tabler:x" data-inline="true"></span>
            </div>
        </div>
        <div class="modal-body">
            <ul class="tag-group">
                @{
                    int i = 0;
                    foreach (var item in Model.ProjetoTags)
                    {
                        <li class="tag-container">
                            <div class="tag">
                                <span class="tag-text">@item.Tag.Nome</span>
                                <div class="remove-tag"><span class="iconify" data-icon="tabler:x" data-inline="true"> </span></div>
                            </div>
                        </li>
                        i++;
                    }
                    if (i == 0)
                    {
                        <li class="tag-container tag-placeholder">
                            <div class="tag"><span class="tag-text">Utilize o campo abaixo para adicionar um interesse!</span></div>
                        </li>
                    }
                }
            </ul>


            <div class="tag-form-group">
                <select id="tag-input">
                </select>
                <button class="add-tag" type="submit" id="add-tag"><span class="iconify" data-icon="tabler:plus" data-inline="false"></span></button>
                <span id="msg"></span>
            </div>

        </div>
    </div>
</div>

<div class="modal-bg hidden" id="modalUploads">
    <div class="modal">
        <div class="modal-header">
            <h3 class="modal-title">Uploads</h3>
            <div class="close-modal" data-close-modal="modalUploads">
                <span class="iconify" data-icon="tabler:x" data-inline="true"></span>
            </div>
        </div>
        @using (Html.BeginForm("AdicionarUpload", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            <div class="form-group" style="width: 16rem; margin: 0 auto">
                @Html.LabelFor(model => model.NomeArquivo)
                @Html.EditorFor(model => model.NomeArquivo)
                @Html.HiddenFor(model => model.Id)
            </div>

            <p class="text-danger">Extensões Permitidas: .pdf - máx. 10Mb</p>

            <div class="form-btns">
                <label for="upload-arq" class="btn btn-secondary">Selecione um arquivo</label>
                <input name="arq" class="btn btn-secondary" type="file" id="upload-arq" />
                <button class="btn btn-primary">Confirmar</button>
            </div>
        }
    </div>
</div>

<div class="modal-bg hidden" id="modalEquipe">
    <div class="modal">
        <div class="modal-header">
            <h3 class="modal-title">Editar Equipe</h3>
            <div class="close-modal" data-close-modal="modalEquipe">
                <span class="iconify" data-icon="tabler:x" data-inline="true"></span>
            </div>
        </div>
        <div class="modal-body">


            <div class="integrantes-grid">

                @foreach (var item in Model.IntegrantesProjetos)
                {
                    <div class="integrante-container">
                        <div class="integrante-info">

                            <div class="profile-pic profile-pic-mini">

                                <img class="circle-pic" src="~/Uploads/@item.Usuario.Foto" />
                            </div>

                            <div class="integrante-contato">
                                <p>@item.Usuario.Email</p>
                                <p>@item.Usuario.Nome</p>
                            </div>
                        </div>
                        <div class="integrante-edit">
                            @if (item.Adm)
                            {
                                <input type="checkbox" id="checkbox-element-@item.Id" checked="checked" value="@item.Id" />
                                <label for="checkbox-element-@item.Id">
                                    <span class="indicator"></span>
                                    <span class="label-text">Administrador</span>
                                </label>
                            }
                            else
                            {
                                <input type="checkbox" id="checkbox-element-@item.Id" value="@item.Id" />
                                <label for="checkbox-element-@item.Id">
                                    <span class="indicator"></span>
                                    <span class="label-text">Administrador</span>
                                </label>
                            }
                            <button class="btn delete-acc" onclick="window.location.href='@Url.Action("ExcluirIntegrante", "Home", new { id = item.Id })'">Remover</button>
                        </div>
                    </div>
                }

            </div>


            @using (Html.BeginForm("AdicionarIntegrante", "Home", FormMethod.Post))
            {
                if (Model.Adm == true)
                {
                    <div class="search-email">
                        @Html.LabelFor(model => model.PesquisaEmail)
                        <div class="search-group">
                            @Html.EditorFor(model => model.PesquisaEmail)
                            @Html.HiddenFor(model => model.Id)
                            <button class="add-tag" type="submit"><span class="iconify" data-icon="tabler:plus" data-inline="false"></span></button>
                            <span id="msg"></span>
                        </div>
                    </div>
                }
                else if (Model.EuIntegrante.Adm == true)
                {
                    <div class="search-email">
                        @Html.LabelFor(model => model.PesquisaEmail)
                        <div class="search-group">
                            @Html.EditorFor(model => model.PesquisaEmail)
                            @Html.HiddenFor(model => model.Id)
                            <button class="add-tag" type="submit"><span class="iconify" data-icon="tabler:plus" data-inline="false"></span></button>
                            <span id="msg"></span>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<div class="modal-bg hidden" id="modalPenalizar">
    <div class="modal">
        <div class="modal-header">
            <h3 class="modal-title">Penalizar Projeto</h3>
            <div class="close-modal" data-close-modal="modalPenalizar">
                <span class="iconify" data-icon="tabler:x" data-inline="true"></span>
            </div>
        </div>

        @using (Html.BeginForm("PenalizarProjeto", "Adm", FormMethod.Post))
        {
            <div class="modal-body">
                <div class="form-group">
                    @Html.HiddenFor(model => model.Id)
                    @Html.LabelFor(model => model.Punicao, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.EditorFor(model => model.Punicao, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Punicao, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.HiddenFor(model => model.IdDenuncia)
                    @Html.LabelFor(model => model.MotivoPunicao, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.TextAreaFor(model => model.MotivoPunicao, new { @class = "bio-text" })
                    @Html.ValidationMessageFor(model => model.MotivoPunicao, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="modal-footer">
                <div class="form-btns">
                    <button type="submit" class="btn btn-primary">Penalizar</button>
                </div>
            </div>
        }

    </div>
</div>

<div class="modal-bg hidden" id="modalDesativar">
    <div class="modal">
        <div class="modal-header">
            <h3 class="modal-title">Desativar Projeto</h3>
            <div class="close-modal" data-close-modal="modalDesativar">
                <span class="iconify" data-icon="tabler:x" data-inline="true"></span>
            </div>
        </div>

        @using (Html.BeginForm("DesativarProjeto", "Adm", FormMethod.Post))
        {
            <div class="modal-body">
                <div class="form-group">
                    @Html.HiddenFor(model => model.Id)
                    @Html.LabelFor(model => model.MotivoPunicao, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.TextAreaFor(model => model.MotivoPunicao, new { @class = "bio-text" })
                    @Html.ValidationMessageFor(model => model.MotivoPunicao, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="modal-footer">
                <div class="form-btns">
                    <button type="submit" class="btn delete-acc">Desativar</button>
                </div>
            </div>
        }

    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/croppie.js"></script>

    <script>
        var $uploadCrop;


        function readFile(input) {

            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('.upload-demo').addClass('ready');
                    $uploadCrop.croppie('bind', {
                        url: e.target.result
                    }).then(function () {
                        console.log('jQuery bind complete');
                    });

                }

                reader.readAsDataURL(input.files[0]);
            }
        }

        $uploadCrop = $('#upload-demo').croppie({
            viewport: {
                width: 189,
                height: 133,
                type: 'square'
            }
        });


        $('#upload').on('change', function () {
            crImage.classList.remove('hidden');
            const file = document.querySelector('#upload').value;
            const fileName = document.querySelector('#preview-file-name');
            fileName.innerText = file.substring(file.lastIndexOf('\\') + 1)
            readFile(this);
        });

        $('.upload-result').on('click', function (ev) {
            ev.preventDefault();
            $uploadCrop.croppie('result', {
                type: 'blob',
                //size: 'viewport'
                size: { width: 756, height: 532 }
            }).then(function (resp) {
                resp = resp.slice(0, resp.size, "image/png")

                let data = new FormData();
                data.append('arq', resp, 'blob.png');
                const projetoId = document.querySelector('input[name="Id"').value;
                data.append('Id', projetoId);

                $.ajax({
                    url: "/Home/EditarLogo",
                    type: 'POST',
                    data: data,
                    contentType: false,
                    processData: false,
                    success: function (data) {
                        document.location.reload();
                    }
                });

            });
        });

        const crImage = document.querySelector('.cr-image');
        crImage.classList.add('hidden');

    </script>

    <script>
        const nomeInput = document.querySelector('#Nome');
        const descInput = document.querySelector('#Descricao');
        const headers = {
            "Content-Type": "application/json",
            "Access-Control-Origin": "*"
        }

        nomeInput.addEventListener('focusout', () => {
            const data = {
                id: @Model.Id,
                nome: nomeInput.value
            }
            fetch("/Home/EditarNomeProjeto", {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(data)
            }).then(res => res.json())
                .then(resJson => {
                    if (resJson == "n") {
                        Swal.fire({
                            title: "Erro",
                            text: "O Nome do Projeto não pode ficar vazio!",
                            icon: "error",
                            confirmButtonText: 'OK'
                        })
                    }
                })
        })

        descInput.addEventListener('focusout', () => {
            const data = {
                id: @Model.Id,
                descricao: descInput.value
            }
            fetch("/Home/EditarDescricao", {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(data)
            }).then(res => res.json())
                .then(resJson => {
                    if (resJson == "n") {
                        Swal.fire({
                            title: "Erro",
                            text: "A Descrição não pode ficar vazia!",
                            icon: "error",
                            confirmButtonText: 'OK'
                        })
                    }
                })
        })
    </script>

    <script>
        fetch("/Home/AutoCompleteTags", {
            method: 'POST',
            headers: headers,
            body: null
        }).then(res => res.json())
            .then(resJson => renderOptions(resJson))

        const tagSelect = document.querySelector('#tag-input');

        function renderOptions(optList) {

            optList.forEach((item) => {
                const option = document.createElement('option');
                option.setAttribute('value', item.Nome);
                option.innerText = item.Nome;
                tagSelect.appendChild(option);
            })
        }

        const addTag = document.querySelector('#add-tag');

        addTag.addEventListener('click', () => {
            const data = {
                Id: @Model.Id,
                PesquisaTag: tagSelect.value
            }

            fetch("/Home/AdicionarTagProjeto", {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(data)
            }).then(res => res.json())
                .then(resJson => {
                    if (resJson == "n") {
                        Swal.fire({
                            title: "Erro",
                            text: "Tag ja cadastrada!",
                            icon: "error",
                            confirmButtonText: 'OK'
                        })
                    }
                    else {
                        renderNewTags(resJson);
                    }
                })
        })

        let removeTag = document.querySelectorAll('.remove-tag');

        removeTag.forEach((item) => {
            item.addEventListener('click', (e) => {
                removeTags(e);
            })
        })

        function removeTags(e) {
                const data = {
                    texto: e.currentTarget.previousElementSibling.innerText,
                    Id: @Model.Id
                }
            fetch("/Home/ExcluirTagProjeto", {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(data)
            }).then((res) => res.json())
                .then((resJson) => renderNewTags(resJson));


        }

        function renderNewTags(resJson) {
                    const tagGroups = document.querySelectorAll('.tag-group');
                    const [tagGroup, tagGroupModal] = tagGroups;
                    const tagsModal = resJson.map(({Nome }) =>
                           `<li class="tag-container">
                                <div class="tag">
                                    <span class="tag-text">${Nome}</span>
                                    <div class="remove-tag">
                                        <span class="iconify" data-icon="tabler:x" data-inline="true"></span>
                                    </div>
                                </div>
                            </li>`
                    ).join('');

                    const tamanhoJson = Object.keys(resJson).length;

                    if (tamanhoJson > 3) {
                        const tags = resJson.slice(0, 3).map(({Nome }) =>
                            `<li class="tag-container">
                                <div class="tag">
                                    <span class="tag-text">${Nome}</span>
                                </div>
                            </li>`
                        );
                        tags.push(`<li class="tag-container">
                                        <div class="tag">
                                            <span class="tag-text">...</span>
                                        </div>
                                   </li>
                                   <li>
                                        <button class="add-tag" onclick="openModalAgain('modalTag')"><span class="iconify" data-icon="tabler:plus" data-inline="false"></span></button>
                                   </li>`
                        );
                        const joinedTags = tags.join('');
                        tagGroup.innerHTML = joinedTags;
                    }
                    else {
                        const tags = resJson.slice(0, tamanhoJson).map(({ Nome }) =>
                            `<li class="tag-container">
                                <div class="tag">
                                    <span class="tag-text">${Nome}</span>
                                </div>
                            </li>`
                        )
                        tags.push(` <li>
                            <button class="add-tag" onclick="openModalAgain('modalTag')"><span class="iconify" data-icon="tabler:plus" data-inline="false"></span></button>
                        </li>`)

                        const joinedTags = tags.join('');
                        tagGroup.innerHTML = joinedTags;
                    }

                    tagGroupModal.innerHTML = tagsModal;

                    removeTag = document.querySelectorAll('.remove-tag');

                    removeTag.forEach((item) => {
                        item.addEventListener('click', (e) => {
                            removeTags(e);
                        })
                    })
        }

        function openModalAgain(targetId) {
            const modalBg = document.querySelector(`#${targetId}`);
            const modal = document.querySelector(`#${targetId}`).firstElementChild

            console.log(modal);
            document.body.style.overflow = 'hidden';
            modalBg.classList.remove('hidden');
            modal.classList.remove('scale-out-center');
            modal.classList.add('scale-in-center');

        }


    </script>
}


